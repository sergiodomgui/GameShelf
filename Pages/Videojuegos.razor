@page "/videojuegos" 
// The rest of the file...
@using GameShelfWeb.Data
@using GameShelfWeb.Models
@inject GameRepository Repo
@inject NavigationManager Navigation

<PageTitle>Mis Videojuegos</PageTitle>

<h1>ðŸ“š Mis Videojuegos</h1>

@if (games == null)
{
    <p><em>Cargando juegos...</em></p>
}
else
{
    <div class="mb-3">
        <button class="btn btn-success" @onclick="GoToAddGamePage">
            âž• AÃ±adir Nuevo Juego
        </button>
    </div>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <button class="btn btn-primary" @onclick="() => ChangePage(-1)" disabled="@(currentPage == 1)">
            &laquo; Anterior
        </button>
        <span>
            PÃ¡gina <strong>@currentPage</strong> de <strong>@totalPages</strong>
        </span>
        <button class="btn btn-primary" @onclick="() => ChangePage(1)" disabled="@(currentPage >= totalPages)">
            Siguiente &raquo;
        </button>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>TÃ­tulo</th>
                <th>Plataforma</th>
                <th>Estado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var game in games)
            {
                <tr>
                    <td>@game.Title</td>
                    <td>@game.Platform</td>
                    <td>@game.Status</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteGame(game.Id)">
                            Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Game>? games;
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalGames;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        totalGames = await Repo.CountAsync(); // âœ… Corregido
        totalPages = (int)Math.Ceiling(totalGames / (double)pageSize);
        await LoadGamesAsync();
    }

    private async Task LoadGamesAsync()
    {
        games = await Repo.GetPagedAsync(currentPage, pageSize); // âœ… Corregido
    }

    private async Task ChangePage(int amount)
    {
        var newPage = currentPage + amount;
        if (newPage > 0 && newPage <= totalPages)
        {
            currentPage = newPage;
            await LoadGamesAsync();
        }
    }

    private async Task DeleteGame(Guid id)
    {
        await Repo.RemoveAsync(id); // âœ… Corregido
        await OnInitializedAsync(); // Recargamos todo para actualizar contadores y la vista
        StateHasChanged(); // Forzamos una actualizaciÃ³n de la UI
    }

    private void GoToAddGamePage()
    {
        Navigation.NavigateTo("/add-game"); 
    }
}